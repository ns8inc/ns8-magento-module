commands:
  test:
    description: "Run All Unit Tests and Integration Tests"
    steps:
      - checkout
      - run:
          command: |
            set +eo pipefail
            if git log | head -n 2 | tail -n 1 | grep 'Author: CircleCI'; then
              circleci step halt
            fi
          name: Skip if CI Made the Last Commit
      - run:
          command: composer install --no-ansi --no-autoloader
          name: Install Module Files
      - run:
          command: |
            vendor/bin/phpcs --config-set installed_paths vendor/magento/magento-coding-standard/Magento2
            composer lint
          name: Lint
      - run:
          command: service mysql start
          name: Start MySQL
      - run:
          command: |
            cp -Rp /var/www/html /var/www/html-backup
            mysqldump magento2 > /tmp/magento2-backup.sql
          name: Create Backup of Magento Installation
      - run:
          command: |
            cd /var/www/html
            jq ".repositories |= [{type: \"path\", url: \"${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}\"}]" composer.json > composer.json-new
            mv composer.json-new composer.json
          name: Switch Composer Repository to Local
      - run:
          command: |
            cd /var/www/html
            composer require ns8/protect-magento @dev
          name: Require Module from Local
      - run:
          command: /var/www/html/bin/magento setup:store-config:set --base-url=https://integration-test-$(date +%s)-$(mktemp -u XXX | tr A-Z a-z).example.com/
          name: Create Unique Storefront URL
      - run:
          command: |
            cd /var/www/html/vendor/ns8/protect-sdk/assets/configuration
            jq -r '.default_environment |= "testing"' core_configuration.json > core_configuration.json-new
            mv core_configuration.json-new core_configuration.json
          name: Point SDK to NS8 Testing Environment
      - run:
          command: |
            cd /var/www/html
            chmod 755 vendor/phpunit/phpunit/phpunit
            vendor/phpunit/phpunit/phpunit -c dev/tests/unit/phpunit.xml.dist vendor/ns8/protect-magento/Test
          name: Run Unit Tests
      - run:
          command: |
            cd /var/www/html
            bin/magento setup:upgrade

            # bin/magento returns 1 if the module is enabled, 0 otherwise, so we invert that
            ! bin/magento module:status NS8_Protect
          name: Integration Test - Install the Module
      - run:
          command: |
            cd /var/www/html
            bin/magento module:disable NS8_Protect

            # bin/magento returns 1 if the module is enabled, 0 otherwise
            bin/magento module:status NS8_Protect
          name: Integration Test - Disable the Module
      - run:
          command: |
            cd /var/www/html
            bin/magento module:enable NS8_Protect

            # bin/magento returns 1 if the module is enabled, 0 otherwise, so we invert that
            ! bin/magento module:status NS8_Protect
          name: Integration Test - Re-Enable the Module
      - run:
          command: |
            cd /var/www/html
            bin/magento module:uninstall NS8_Protect -n -r

            # bin/magento returns 1 if the module is uninstalled, 0 otherwise, so we invert that
            ! bin/magento module:status NS8_Protect
          name: Integration Test - Uninstall the Module
      - run:
          command: |
            cd /var/www
            rm -rf html
            mv html-backup html
            mysql magento2 < /tmp/magento2-backup.sql
          name: Restore Magento Installation from Backup
      - run:
          command: |
            cd /var/www/html
            jq ".repositories |= []" composer.json > composer.json-new
            mv composer.json-new composer.json
          name: Disable Magento Repo
      - run:
          command: |
            cd /var/www/html
            composer require ns8/protect-magento
          name: Require Latest Release of Module (for Upgrade Test)
      - run:
          command: /var/www/html/bin/magento setup:store-config:set --base-url=https://integration-test-$(date +%s)-$(mktemp -u XXX | tr A-Z a-z).example.com/
          name: Create Unique Storefront URL
      - run:
          command: |
            cd /var/www/html/vendor/ns8/protect-sdk/assets/configuration
            jq -r '.default_environment |= "testing"' core_configuration.json > core_configuration.json-new
            mv core_configuration.json-new core_configuration.json
          name: Point the SDK to the NS8 Testing Environment
      - run:
          command: |
            /var/www/html/bin/magento setup:upgrade
          name: Pre-Install Latest Release of Module
      - run:
          command: |
            cd /var/www/html
            jq ".repositories |= [{type: \"path\", url: \"${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}\"}]" composer.json > composer.json-new
            mv composer.json-new composer.json
          name: Switch Composer Repository to Local
      - run:
          command: |
            jq "del(.version)" composer.json > composer.json-new
            mv composer.json-new composer.json
          name: Unversion Local Module
      - run:
          command: |
            cd /var/www/html
            composer require ns8/protect-magento @dev
          name: Require Local Module
      - run:
          command: |
            cd /var/www/html/vendor/ns8/protect-sdk/assets/configuration
            jq -r '.default_environment |= "testing"' core_configuration.json > core_configuration.json-new
            mv core_configuration.json-new core_configuration.json
          name: Point SDK to NS8 Testing Environment
      - run:
          command: |
            cd /var/www/html
            bin/magento setup:upgrade

            # bin/magento returns 1 if the module is enabled, 0 otherwise, so we invert that
            ! bin/magento module:status NS8_Protect
          name: Integration Test - Upgrade the Module

jobs:
  deploy:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-php
    steps:
      - add_ssh_keys:
          fingerprints:
            - "53:1d:b4:b6:2f:4e:48:66:8e:eb:3d:67:bf:9e:d7:0d"
      - run:
          command: |
            apt-get update
            apt-get install -y npm
            curl -o- -L https://yarnpkg.com/install.sh | bash
          name: Install Yarn for Release Notes
      - checkout
      - run:
          command: |
            set +eo pipefail
            if git log | head -n 2 | tail -n 1 | grep 'Author: CircleCI'; then
              circleci step halt
            fi
          name: Skip if CI Made the Last Commit
      - run:
          command: |
            git config user.email noreply@ns8.com
            git config user.name 'CircleCI'
          name: Setup Git
      - run:
          command: |
            version=$(jq -r .version composer.json | awk -F . '{$NF+=1; print $0}' OFS=".")
            jq -r ".version |= \"$version\"" composer.json > composer.json-new
            mv composer.json-new composer.json
            sed -i "s/setup_version=\".*\"/setup_version=\"$version\"/" etc/module.xml
            git add composer.json etc/module.xml
            git commit -m "v$version"
            git tag $version -am "v$version"
            git push -u origin ctdoriott/test
          name: Bump Version In Files
      - run:
          command: |
            if ! git push -u origin ctdoriott/test --follow-tags; then
              echo "Push failed. Please add this CircleCI deploy key to your repo with write access:"
              ssh-keygen -y -f ~/.ssh/id_rsa
              exit 1
            fi
          name: Tag Release in GitHub
      - run:
          command: |
            echo {} > package.json
            version=$(jq -r .version composer.json)
            ~/.yarn/bin/yarn add github-release-notes
            ~/.yarn/bin/yarn gren release -m -t $version -T $GITHUB_ACCESS_TOKEN
            ~/.yarn/bin/yarn gren release -o -t $version -T $GITHUB_ACCESS_TOKEN
          name: Create GitHub Release Via Gren
  publish:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-php
    steps:
      - checkout
      - run:
          command: zip -x 'yarn*' -x -x '.*' -x package.json -x '*node_modules*' -x CODEOWNERS -x 'Test/*' -r9 NS8_Protect.zip .
          name: Make Zip File
      - run:
          command: |
            version=$(jq -r .version composer.json)
            echo "export VERSION=$version" >> $BASH_ENV
          name: Get Version
      - run:
          command: |
            FILENAME="NS8_Protect-$VERSION.zip"
            mv NS8_Protect.zip $FILENAME
            UPLOAD_URL_TEMPLATE=(curl https://api.github.com/repos/ns8inc/protect-integration-magento/releases/tags/2.5.14 | jq .upload_url)
            UPLOAD_URL=$(echo $UPLOAD_URL | sed "s/{?name,label}/?name=$FILENAME/g"| tr -d '"')
            curl --data-binary @"$FILENAME" -H "Authorization: token $GITHUB_ACCESS_TOKEN" -H "Content-Type: application/octet-stream" $UPLOAD_URL
          name: Attach Zip File To Release
  #test_7-1_2-3-0:
  #  docker:
  #    - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.1-2.3.0
  #  steps:
  #    - test
  test_7-1_2-3-1:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.1-2.3.1
    steps:
      - test
  test_7-1_2-3-2-p2:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.1-2.3.2-p2
    steps:
      - test
  test_7-1_2-3-3:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.1-2.3.3
    steps:
      - test
  #test_7-2_2-3-0:
  #  docker:
  #    - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.2-2.3.0
  #  steps:
  #    - test
  test_7-2_2-3-1:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.2-2.3.1
    steps:
      - test
  test_7-2_2-3-2-p2:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.2-2.3.2-p2
    steps:
      - test
  test_7-2_2-3-3:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.2-2.3.3
    steps:
      - test
  test_7-2_2-3-4-p2:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.2-2.3.4-p2
    steps:
      - test
  test_7-2_2-3-5-p1:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.2-2.3.5-p1
    steps:
      - test
  test_7-3_2-3-3:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.3-2.3.3
    steps:
      - test
  test_7-3_2-3-4-p2:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.3-2.3.4-p2
    steps:
      - test
  test_latest:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:latest
    steps:
      - test

version: 2.1

workflows:
  publish:
    jobs:
      - publish:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
  test_and_deploy:
    jobs:
      - approve:
          type: approval
          filters:
            branches:
              only: ctdoriott/test
      - deploy:
          requires:
           - approve
