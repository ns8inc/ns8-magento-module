commands:
  test:
    description: "Run All Unit Tests, Integration Tests and Acceptance Tests"
    steps:
      - checkout
      - run:
          command: |
            jq "del(.version)" composer.json > composer.json-new
            mv composer.json-new composer.json
          name: Unversion Local Module
      - run:
          command: |
            composer require ns8/protect-sdk:dev-master --no-ansi
            rm -f vendor/autoload.php vendor/composer/autoload_*.php
          name: Switch to PHP SDK's Master Branch
      - run:
          command: |
            composer config-lint
            composer lint
          name: Lint
      - run:
          command: service mysql start
          name: Start MySQL
      - run:
          command: service elasticsearch start
          name: Start Elasticsearch
      - run:
          command: |
            cp -Rp /var/www/html /var/www/html-backup
            mysqldump magento2 > /tmp/magento2-backup.sql
          name: Create Backup of Magento Installation
      - run:
          command: |
            cd /var/www/html
            jq ".\"minimum-stability\" |= \"dev\"" composer.json > composer.json-new
            mv composer.json-new composer.json
          name: Set Magento's Minimum Stability to Dev
      - run:
          command: |
            cd /var/www/html
            jq ".repositories |= [{options: {symlink: false}, type: \"path\", url: \"${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}\"}]" composer.json > composer.json-new
            mv composer.json-new composer.json
          name: Switch Composer Repository to Local
      - run:
          command: |
            cd /var/www/html
            composer require ns8/protect-magento:@dev
          name: Require Module from Local
      - run:
          command: /var/www/html/bin/magento setup:store-config:set --base-url=https://integration-test-$(date +%s)-$(mktemp -u XXX | tr A-Z a-z).example.com/
          name: Create Unique Storefront URL
      - run:
          command: |
            cd /var/www/html/vendor/ns8/protect-sdk/assets/configuration
            jq -r '.default_environment |= "testing"' core_configuration.json > core_configuration.json-new
            mv core_configuration.json-new core_configuration.json
          name: Point SDK to NS8 Testing Environment
      - run:
          command: |
            cd /var/www/html
            chmod 755 vendor/phpunit/phpunit/phpunit
            vendor/phpunit/phpunit/phpunit -c dev/tests/unit/phpunit.xml.dist vendor/ns8/protect-magento/Test
          name: Run Unit Tests
      - run:
          command: |
            cd /var/www/html
            bin/magento setup:upgrade

            # bin/magento returns 1 if the module is enabled, 0 otherwise, so we invert that
            ! bin/magento module:status NS8_Protect
          name: Integration Test - Install the Module
      - run:
          command: |
            cd /var/www/html
            bin/magento module:disable NS8_Protect

            # bin/magento returns 1 if the module is enabled, 0 otherwise
            bin/magento module:status NS8_Protect
          name: Integration Test - Disable the Module
      - run:
          command: |
            cd /var/www/html
            bin/magento module:enable NS8_Protect

            # bin/magento returns 1 if the module is enabled, 0 otherwise, so we invert that
            ! bin/magento module:status NS8_Protect
          name: Integration Test - Re-Enable the Module
      - run:
          command: |
            cd /var/www/html
            bin/magento module:uninstall NS8_Protect -n -r

            # bin/magento returns 1 if the module is uninstalled, 0 otherwise, so we invert that
            ! bin/magento module:status NS8_Protect
          name: Integration Test - Uninstall the Module
      - run:
          command: |
            rm -rf /var/www/html
            cp -Rp /var/www/html-backup /var/www/html
            mysql magento2 < /tmp/magento2-backup.sql
          name: Restore Magento Installation from Backup
      - run:
          command: |
            cd /var/www/html
            jq ".repositories |= []" composer.json > composer.json-new
            mv composer.json-new composer.json
          name: Disable Magento Repo
      - run:
          command: |
            cd /var/www/html
            composer require ns8/protect-magento
          name: Require Latest Release of Module (for Upgrade Test)
      - run:
          command: /var/www/html/bin/magento setup:store-config:set --base-url=https://integration-test-$(date +%s)-$(mktemp -u XXX | tr A-Z a-z).example.com/
          name: Create Unique Storefront URL
      - run:
          command: |
            cd /var/www/html/vendor/ns8/protect-sdk/assets/configuration
            jq -r '.default_environment |= "testing"' core_configuration.json > core_configuration.json-new
            mv core_configuration.json-new core_configuration.json
          name: Point SDK to NS8 Testing Environment
      - run:
          command: |
            /var/www/html/bin/magento setup:upgrade
          name: Pre-Install Latest Release of Module
      - run:
          command: |
            cd /var/www/html
            jq ".repositories |= [{options: {symlink: false}, type: \"path\", url: \"${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}\"}]" composer.json > composer.json-new
            mv composer.json-new composer.json
          name: Switch Composer Repository to Local
      - run:
          command: |
            cd /var/www/html
            jq ".\"minimum-stability\" |= \"dev\"" composer.json > composer.json-new
            mv composer.json-new composer.json
          name: Set Magento's Minimum Stability to Dev
      - run:
          command: |
            cd /var/www/html
            composer require ns8/protect-sdk:dev-master ns8/protect-magento:@dev
          name: Upgrade Module from Local
      - run:
          command: |
            cd /var/www/html/vendor/ns8/protect-sdk/assets/configuration
            jq -r '.default_environment |= "testing"' core_configuration.json > core_configuration.json-new
            mv core_configuration.json-new core_configuration.json
          name: Point SDK to NS8 Testing Environment
      - run:
          command: |
            cd /var/www/html
            bin/magento setup:upgrade

            # bin/magento returns 1 if the module is enabled, 0 otherwise, so we invert that
            ! bin/magento module:status NS8_Protect
          name: Integration Test - Upgrade the Module
      - run:
          command: /var/www/html/bin/magento admin:user:create --admin-email=test@ns8.com --admin-firstname=Acceptance --admin-lastname=Tester --admin-password=123456a --admin-user=admin
          name: Create Administrator Account for Acceptance Testing
      - run:
          command: |
            sed -i "s/'Magento_Captcha' => 1,/'Magento_Captcha' => 0,/" /var/www/html/app/etc/config.php
            sed -i "s/'MSP_ReCaptcha' => 1,/'MSP_ReCaptcha' => 0,/" /var/www/html/app/etc/config.php
          name: Disable CAPTCHAs
      - run:
          command: |
            service cron start
            /var/www/html/bin/magento cron:install
          name: Setup Cron
      - run:
          command: |
            sed -i "s/'Magento_AdminAnalytics' => 1,/'Magento_AdminAnalytics' => 0,/" /var/www/html/app/etc/config.php
          name: Disable Intrusive Admin Data Collection Modal
      - run:
          command: /var/www/html/bin/magento deploy:mode:set developer
          name: Enable Developer Mode
      - run:
          command: |
            git clone https://$GITHUB_ACCESS_TOKEN@github.com/ns8inc/ns8-acceptance-tests.git
            yarnpkg --cwd ns8-acceptance-tests --frozen-lockfile
          name: Install Acceptance Tests
      - run:
          command: |
            store_hostname="acceptance-test-$(date +%s)-$(mktemp -u XXX | tr A-Z a-z).example.com"
            echo "127.0.0.1 $store_hostname" >> /etc/hosts
            /var/www/html/bin/magento setup:store-config:set --base-url=http://$store_hostname/
            echo "export MAGENTO_STORE_URL=http://$store_hostname/index.php" >> $BASH_ENV
          name: Create Unique Storefront URL
      - run:
          command: a2enmod rewrite
          name: Enable mod_rewrite
      - run:
          command: |
            chown -R www-data:www-data /var/www/html
            chmod -R 2775 /var/www/html
          name: Set Webroot Permissions
      - run:
          command: /var/www/html/bin/magento cache:clean
          name: Clear Cache
      - run:
          command: service apache2 start
          name: Start Web Server
      - run:
          command: |
            cd ns8-acceptance-tests
            yarnpkg workspace magento run xtest:all
          environment:
            HEADLESS: 1
            MAGENTO_ADMIN_PASSWORD: 123456a
            MAGENTO_ADMIN_USER: admin
            PROTECT_CLIENT_URL: https://test-protect-client.ns8.com
          name: Run All Acceptance Tests
      - store_test_results:
          path: ns8-acceptance-tests/report/magento
      - store_artifacts:
          path: ns8-acceptance-tests/report/magento

jobs:
  deploy:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-php
    steps:
      - add_ssh_keys:
          fingerprints:
            - "53:1d:b4:b6:2f:4e:48:66:8e:eb:3d:67:bf:9e:d7:0d"
      - checkout
      - run:
          command: |
            git config user.email noreply@ns8.com
            git config user.name 'CircleCI'
          name: Setup Git
      - run:
          command: |
            version=$(jq -r .version composer.json | awk -F . '{$NF+=1; print $0}' OFS=".")
            jq -r ".version |= \"$version\"" composer.json > composer.json-new
            mv composer.json-new composer.json
            sed -i "s/setup_version=\".*\"/setup_version=\"$version\"/" etc/module.xml
            git add composer.json etc/module.xml
            git commit -m "v$version"
            git tag $version -am "v$version"
          name: Bump Version In Files
      - run:
          command: |
            if ! git push -u origin master --follow-tags; then
              echo "Push failed. Please add this CircleCI deploy key to your repo with write access:"
              ssh-keygen -y -f ~/.ssh/id_rsa
              exit 1
            fi
          name: Tag Release in GitHub
      - run:
          command: |
            version=$(jq -r .version composer.json)
            yarn global add github-release-notes
            gren release -m -t $version -T $GITHUB_ACCESS_TOKEN
            gren release -o -t $version -T $GITHUB_ACCESS_TOKEN
          name: Create GitHub Release Via Gren
  publish:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-php
    steps:
      - checkout
      - run:
          command: zip -x '.*' -x CODEOWNERS -x 'Test/*' -r9 NS8_Protect.zip .
          name: Make Zip File
      - run:
          command: |
            version=$(jq -r .version composer.json)
            echo "export VERSION=$version" >> $BASH_ENV
          name: Get Version
      - run:
          command: |
            FILENAME="NS8_Protect-$VERSION.zip"
            mv NS8_Protect.zip $FILENAME
            UPLOAD_URL_TEMPLATE=$(curl https://api.github.com/repos/ns8inc/protect-integration-magento/releases/tags/$VERSION | jq .upload_url)
            UPLOAD_URL=$(echo $UPLOAD_URL_TEMPLATE | sed "s/{?name,label}/?name=$FILENAME/g"| tr -d '"')
            curl --data-binary @"$FILENAME" -H "Authorization: token $GITHUB_ACCESS_TOKEN" -H "Content-Type: application/octet-stream" $UPLOAD_URL
          name: Attach Zip File To Release
  test_7-1_2-3-0:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.1-2.3.0
    steps:
      - test
  test_7-1_2-3-1:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.1-2.3.1
    steps:
      - test
  test_7-1_2-3-2-p2:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.1-2.3.2-p2
    steps:
      - test
  test_7-1_2-3-3:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.1-2.3.3
    steps:
      - test
  test_7-2_2-3-0:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.2-2.3.0
    steps:
      - test
  test_7-2_2-3-1:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.2-2.3.1
    steps:
      - test
  test_7-2_2-3-2-p2:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.2-2.3.2-p2
    steps:
      - test
  test_7-2_2-3-3:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.2-2.3.3
    steps:
      - test
  test_7-2_2-3-4-p2:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.2-2.3.4-p2
    steps:
      - test
  test_7-2_2-3-5-p2:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.2-2.3.5-p2
    steps:
      - test
  test_7-3_2-3-3:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.3-2.3.3
    steps:
      - test
  test_7-3_2-3-4-p2:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.3-2.3.4-p2
    steps:
      - test
  test_7-3_2-3-5-p2:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.3-2.3.5-p2
    steps:
      - test
  test_7-3_2-4-0:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.3-2.4.0
    steps:
      - test
  test_7-4_2-4-0:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.4-2.4.0
    steps:
      - test
  test_latest:
    docker:
      - image: 244249143763.dkr.ecr.us-west-2.amazonaws.com/ns8-magento:7.3-2.3.5-p2-dave
    steps:
      - test

version: 2.1

workflows:
  publish:
    jobs:
      - publish:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
  test_and_deploy:
    jobs:
      - test_latest
      - approve:
          type: approval
          filters:
            branches:
              only: master
          requires:
            - test_latest
      - test_7-1_2-3-0:
          requires:
            - approve
      - test_7-1_2-3-1:
          requires:
            - approve
      - test_7-1_2-3-2-p2:
          requires:
            - approve
      - test_7-1_2-3-3:
          requires:
            - approve
      - test_7-2_2-3-0:
          requires:
            - approve
      - test_7-2_2-3-1:
          requires:
            - approve
      - test_7-2_2-3-2-p2:
          requires:
            - approve
      - test_7-2_2-3-3:
          requires:
            - approve
      - test_7-2_2-3-4-p2:
          requires:
            - approve
      - test_7-2_2-3-5-p2:
          requires:
            - approve
      - test_7-3_2-3-3:
          requires:
            - approve
      - test_7-3_2-3-4-p2:
          requires:
            - approve
      - test_7-3_2-3-5-p2:
          requires:
            - approve
      - test_7-3_2-4-0:
          requires:
            - approve
      - test_7-4_2-4-0:
          requires:
            - approve
      - deploy:
          requires:
            - test_7-1_2-3-0
            - test_7-1_2-3-1
            - test_7-1_2-3-2-p2
            - test_7-1_2-3-3
            - test_7-2_2-3-0
            - test_7-2_2-3-1
            - test_7-2_2-3-2-p2
            - test_7-2_2-3-3
            - test_7-2_2-3-4-p2
            - test_7-2_2-3-5-p2
            - test_7-3_2-3-3
            - test_7-3_2-3-4-p2
            #- test_7-3_2-3-5-p2
            - test_7-3_2-4-0
            - test_7-4_2-4-0
