jobs:
  deploy:
    docker:
      - image: php:7.3-cli
    steps:
      - run:
          command: |
            apt-get update
            apt-get install -y git
          name: Install Git
      - add_ssh_keys:
          fingerprints:
            - "53:1d:b4:b6:2f:4e:48:66:8e:eb:3d:67:bf:9e:d7:0d"
      - checkout
      - run:
          command: |
            set +eo pipefail
            if git log | head -n 2 | tail -n 1 | grep 'Author: CircleCI'; then
              circleci step halt
            fi
          name: Skip if CI Made the Last Commit
      - run:
          command: |
            git config user.email noreply@ns8.com
            git config user.name 'CircleCI'
          name: Setup Git
      - run:
          command: apt-get install -y jq
          name: Install JQ
      - run:
          command: |
            version=$(jq -r .version composer.json | awk -F . '{$NF+=1; print $0}' OFS=".")
            jq -r ".version |= \"$version\"" composer.json > composer.json-new
            mv composer.json-new composer.json
            sed -i "s/setup_version=\".*\"/setup_version=\"$version\"/" etc/module.xml
            git add composer.json etc/module.xml
            git commit -m "v$version"
            git tag $version -am "v$version"
          name: Bump Version
      - run:
          command: |
            if ! git push -u origin master --follow-tags; then
              echo "Push failed. Please add this CircleCI deploy key to your repo with write access:"
              ssh-keygen -y -f ~/.ssh/id_rsa
              exit 1
            fi
          name: Tag Release in GitHub
      - run:
          command: |
            git checkout dev
            git merge -m 'Merge branch `master` into `dev`' master
            git push origin dev
          name: Merge Changes Back to Development Branch
  publish:
    docker:
      - image: php:7.3-cli
    steps:
      - run:
          command: |
            apt-get update
            apt-get install -y git
          name: Install Git
      - checkout
      - run:
          command: apt-get install -y jq python zip
          name: Install Tools
      - run:
          command: zip -x '.*' -x CODEOWNERS -x 'Test/*' -r9 NS8_Protect.zip .
          name: Make Zip File
      - run:
          command: ln -s ~/bin/aws /usr/local/bin/
          name: Create Symlink for AWS CLI
      - run:
          command: |
            version=$(jq -r .version composer.json)
            echo "export VERSION=$version" >> $BASH_ENV
          name: Get Version
      - aws-s3/copy:
          arguments: |
            --acl private \
            --content-type application/zip
          from: NS8_Protect.zip
          to: s3://${AWS_S3_BUCKET}/NS8_Protect-${VERSION}.zip
  test:
    docker:
      - image: php:7.3-cli
    steps:
      - run:
          command: |
            apt-get update
            apt-get install -y git
          name: Install Git
      - checkout
      - run:
          command: |
            set +eo pipefail
            if git log | head -n 2 | tail -n 1 | grep 'Author: CircleCI'; then
              circleci step halt
            fi
          name: Skip if CI Made the Last Commit
      - run:
          command: apt-get install -y default-mysql-server jq unzip wget
          name: Install Tools
      - run:
          command: apt-get install -y libicu-dev libjpeg-dev libpng-dev libxslt1-dev libzip-dev
          name: Install Libraries
      - run:
          command: |
            docker-php-ext-configure gd --with-jpeg-dir=/usr/include/
            docker-php-ext-install bcmath gd intl pdo_mysql soap sockets xsl zip
          name: Install PHP Extensions
      - run:
          command: |
            pecl install xdebug
            docker-php-ext-enable xdebug
          name: Install XDebug
      - run:
          command: |
            cp /usr/local/etc/php/php.ini-development /usr/local/etc/php/php.ini
            sed -i 's/memory_limit = 128M/memory_limit = 4096M/g' /usr/local/etc/php/php.ini
          name: Configure PHP
      - run:
          command: |
            cd /tmp
            expected_signature="$(wget -q -O - https://composer.github.io/installer.sig)"
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            actual_signature="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
            if [ "$expected_signature" != "$actual_signature" ]; then
              >&2 echo 'ERROR: Invalid installer signature'
              exit 1
            fi
            php composer-setup.php --filename=composer --install-dir=/usr/local/bin --quiet
          name: Install Composer
      - run:
          command: composer install --no-ansi --no-autoloader
          name: Install Module Files
      - run:
          command: |
            vendor/bin/phpcs --config-set installed_paths vendor/magento/magento-coding-standard/Magento2
            composer lint
          name: Lint
      - run:
          command: |
            service mysql start
            mysqladmin create magento2
            mysql -e "GRANT ALL PRIVILEGES ON magento2.* TO 'magento_db_user'@'localhost' IDENTIFIED BY 'magento_db_password'"
          name: Setup MySQL
      - run:
          command: |
            curl -o /tmp/magento.zip "$MAGENTO_URL"
            unzip -q /tmp/magento.zip -d /tmp/magento
            composer install -d /tmp/magento --no-ansi
            /tmp/magento/bin/magento setup:install \
              --admin-email=dev@ns8demos.com \
              --admin-firstname=Development \
              --admin-lastname=Testing \
              --admin-password=secret1 \
              --admin-user=development \
              --backend-frontname=admin_demo \
              --base-url=https://integration-test-$(date +%s).example.com/ \
              --db-host=127.0.0.1 \
              --db-name=magento2 \
              --db-password=magento_db_password \
              --db-user=magento_db_user \
              --language=en_US \
              --timezone=America/Los_Angeles \
              --use-secure=1 \
              --use-secure-admin=1
          name: Install Magento
          no_output_timeout: 30m
      - run:
          command: |
            cd /tmp/magento
            jq ".repositories |= [{type: \"path\", url: \"${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}\"}]" composer.json > composer.json-new
            mv composer.json-new composer.json
            composer require ns8/protect-magento @dev
          name: Enable Module
      - run:
          command: |
            cd /tmp/magento
            chmod 755 vendor/phpunit/phpunit/phpunit
            vendor/phpunit/phpunit/phpunit -c dev/tests/unit/phpunit.xml.dist vendor/ns8/protect-magento/Test
          name: Run Unit Tests
      - run:
          command: |
            cd /tmp/magento/vendor/ns8/protect-sdk/assets/configuration
            jq -r '.default_environment |= "testing"' core_configuration.json > core_configuration.json-new
            mv core_configuration.json-new core_configuration.json
            cd /tmp/magento
            bin/magento setup:upgrade

            # bin/magento returns 1 if the module is enabled, 0 otherwise, so we invert that
            ! bin/magento module:status NS8_Protect
          name: Run Integration Test for Installation

orbs:
  aws-s3: circleci/aws-s3@1.0.15

version: 2.1

workflows:
  publish:
    jobs:
      - publish:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
  test_and_deploy:
    jobs:
      - test
      - deploy:
          type: approval
          filters:
            branches:
              only: master
          requires:
            - test
