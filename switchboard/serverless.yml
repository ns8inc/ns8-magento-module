custom:
  integrationName: ${self:service}-${self:provider.stage}
functions:
  CreateOrderAction:
    handler: dist/app.CreateOrderAction
    name: '${self:custom.integrationName}-createOrderAction'
  OnInstallEvent:
    handler: dist/app.OnInstallEvent
    name: '${self:custom.integrationName}-onInstallEvent'
  UninstallAction:
    handler: dist/app.UninstallAction
    name: '${self:custom.integrationName}-uninstallAction'
  UpdateCustVerifyStatusEvent:
    handler: dist/app.UpdateCustVerifyStatusEvent
    name: '${self:custom.integrationName}-updateCustVerifyStatusEvent'
  UpdateEQ8ScoreEvent:
    handler: dist/app.UpdateEQ8ScoreEvent
    name: '${self:custom.integrationName}-updateEQ8ScoreEvent'
  UpdateMerchantAction:
    handler: dist/app.UpdateMerchantAction
    name: '${self:custom.integrationName}-updateMerchantAction'
  UpdateOrderRiskEvent:
    handler: dist/app.UpdateOrderRiskEvent
    name: '${self:custom.integrationName}-updateOrderRiskEvent'
  UpdateOrderStatusAction:
    handler: dist/app.UpdateOrderStatusAction
    name: '${self:custom.integrationName}-updateOrderStatusAction'
  UpdateOrderStatusEvent:
    handler: dist/app.UpdateOrderStatusEvent
    name: '${self:custom.integrationName}-updateOrderStatusEvent'
package:
  exclude:
    - 'src/**'
    - 'test/**'
    - '.circleci/**'
    - 'scripts/**'
    - '.idea/**'
    - '.vscode/**'
    - README.md
    - '?*/**.map'
    - '?*.json'
    - '?*.lock'
    - '?*.log'
  include:
    - switchboard.json
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
provider:
  iamRoleStatements:
    -
      Action: 's3:GetObject'
      Effect: Allow
      Resource: 'arn:aws:s3:::protect-api-switch-data-${self:provider.stage}/*'
  name: aws
  region: us-west-2
  runtime: nodejs10.x
  stage: '${opt:stage, env:DEV_NAME}'
  timeout: 30
RetryDefault: &retryDefault
  Retry:
  - BackoffRate: 2
    ErrorEquals:
      - States.ALL
    IntervalSeconds: 1
    MaxAttempts: 0
service: 'ns8-switchboard-${file(./switchboard.json):id}'
stepFunctions:
  stateMachines:
    CreateOrderAction:
      definition:
        StartAt: CreateOrderActionStart
        States:
          CreateOrderActionStart:
            <<: *retryDefault
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-createOrderAction'
            Type: Task
      name: '${self:custom.integrationName}-createOrderAction'
    OnInstallEvent:
      definition:
        StartAt: OnInstallEventStart
        States:
          OnInstallEventStart:
            <<: *retryDefault
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-onInstallEventStart'
            Type: Task
      name: '${self:custom.integrationName}-onInstallEventStart'
    UninstallAction:
      definition:
        StartAt: UninstallActionStart
        States:
          UninstallActionStart:
            <<: *retryDefault
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-uninstallAction'
            Type: Task
      name: '${self:custom.integrationName}-uninstallAction'
    UpdateCustVerifyStatusEvent:
      definition:
        StartAt: UpdateCustVerifyStatusEventStart
        States:
          UpdateCustVerifyStatusEventStart:
            <<: *retryDefault
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-updateCustVerifyStatusEvent'
            Type: Task
      name: '${self:custom.integrationName}-updateCustVerifyStatusEvent'
    UpdateEQ8ScoreEvent:
      definition:
        StartAt: UpdateEQ8ScoreEventStart
        States:
          UpdateEQ8ScoreEventStart:
            <<: *retryDefault
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-updateEQ8ScoreEvent'
            Type: Task
      name: '${self:custom.integrationName}-updateEQ8ScoreEvent'
    UpdateMerchantAction:
      definition:
        StartAt: UpdateMerchantActionStart
        States:
          UpdateMerchantActionStart:
            <<: *retryDefault
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-updateMerchantAction'
            Type: Task
      name: '${self:custom.integrationName}-updateMerchantAction'
    UpdateOrderRiskEvent:
      definition:
        StartAt: UpdateOrderRiskEventStart
        States:
          UpdateOrderRiskEventStart:
            <<: *retryDefault
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-updateOrderRiskEvent'
            Type: Task
      name: '${self:custom.integrationName}-updateOrderRiskEvent'
    UpdateOrderStatusAction:
      definition:
        StartAt: UpdateOrderStatusActionStart
        States:
          UpdateOrderStatusActionStart:
            <<: *retryDefault
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-updateOrderStatusAction'
            Type: Task
      name: '${self:custom.integrationName}-updateOrderStatusAction'
    UpdateOrderStatusEvent:
      definition:
        StartAt: UpdateOrderStatusEventStart
        States:
          UpdateOrderStatusEventStart:
            <<: *retryDefault
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-updateOrderStatusEvent'
            Type: Task
      name: '${self:custom.integrationName}-updateOrderStatusEvent'
