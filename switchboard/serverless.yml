custom:
  integrationName: ${self:service}-${self:provider.stage}
functions:
  CreateOrder:
    handler: dist/app.CreateOrder
    name: '${self:custom.integrationName}-CreateOrder'
  Install:
    handler: dist/app.Install
    name: '${self:custom.integrationName}-Install'
  Uninstall:
    handler: dist/app.Uninstall
    name: '${self:custom.integrationName}-Uninstall'
  UpdateCustomer:
    handler: dist/app.UpdateCustomer
    name: '${self:custom.integrationName}-UpdateCustomer'
  UpdateEQ8Score:
    handler: dist/app.UpdateEQ8Score
    name: '${self:custom.integrationName}-UpdateEQ8Score'
  UpdateMerchant:
    handler: dist/app.UpdateMerchant
    name: '${self:custom.integrationName}-UpdateMerchant'
  UpdateOrderRisk:
    handler: dist/app.UpdateOrderRisk
    name: '${self:custom.integrationName}-UpdateOrderRisk'
  UpdateOrderStatus:
    handler: dist/app.UpdateOrderStatus
    name: '${self:custom.integrationName}-UpdateOrderStatus'

RetryDefault: &retryDefault
  Retry:
  - ErrorEquals:
    - States.ALL
    IntervalSeconds: 1
    BackoffRate: 2

package:
  exclude:
    - 'src/**'
    - 'test/**'
    - '.circleci/**'
    - 'scripts/**'
    - '.idea/**'
    - '.vscode/**'
    - README.md
    - '?*/**.map'
    - '?*.json'
    - '?*.lock'
    - '?*.log'
  include:
    - switchboard.json
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
provider:
  iamRoleStatements:
    -
      Action: 's3:GetObject'
      Effect: Allow
      Resource: 'arn:aws:s3:::protect-api-switch-data-${self:provider.stage}/*'
  name: aws
  region: us-west-2
  runtime: nodejs8.10
  stage: '${opt:stage, env:DEV_NAME}'
  timeout: 30
service: 'ns8-switchboard-${file(./switchboard.json):id}'
stepFunctions:
  stateMachines:
    CreateOrder:
      definition:
        StartAt: CreateOrderStart
        States:
          CreateOrderStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-CreateOrder'
            Retry:
              -
                BackoffRate: 2
                ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 0
            Type: Task
      name: '${self:custom.integrationName}-CreateOrder'
    Install:
      definition:
        StartAt: InstallStart
        States:
          InstallStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-Install'
            Retry:
              -
                BackoffRate: 2
                ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 0
            Type: Task
      name: '${self:custom.integrationName}-Install'
    Uninstall:
      definition:
        StartAt: UninstallStart
        States:
          UninstallStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-Uninstall'
            Retry:
              -
                BackoffRate: 2
                ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 0
            Type: Task
      name: '${self:custom.integrationName}-Uninstall'
    UpdateCustomer:
      definition:
        StartAt: UpdateCustomerStart
        States:
          UpdateCustomerStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-UpdateCustomer'
            Retry:
              -
                BackoffRate: 2
                ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 0
            Type: Task
      name: '${self:custom.integrationName}-UpdateCustomer'
    UpdateEQ8Score:
      definition:
        StartAt: UpdateEQ8ScoreStart
        States:
          UpdateEQ8ScoreStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-UpdateEQ8Score'
            Retry:
              -
                BackoffRate: 2
                ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 0
            Type: Task
      name: '${self:custom.integrationName}-UpdateEQ8Score'
    UpdateMerchant:
      definition:
        StartAt: UpdateMerchantStart
        States:
          UpdateMerchantStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-UpdateMerchant'
            Retry:
              -
                BackoffRate: 2
                ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 0
            Type: Task
      name: '${self:custom.integrationName}-updateMerchantAction'
    UpdateOrderRisk:
      definition:
        StartAt: UpdateOrderRiskStart
        States:
          UpdateOrderRiskStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-UpdateOrderRisk'
            Retry:
              -
                BackoffRate: 2
                ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 0
            Type: Task
      name: '${self:custom.integrationName}-UpdateOrderRisk'
    UpdateOrderStatus:
      definition:
        StartAt: UpdateOrderStatus
        States:
          UpdateOrderStatus:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-UpdateOrderStatus'
            Retry:
              -
                BackoffRate: 2
                ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 0
            Type: Task
      name: '${self:custom.integrationName}-UpdateOrderStatus'
